<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
    destroy-method="close">
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="${jdbc.initialSize}"/>
    <property name="minIdle" value="${jdbc.minIdle}"/>
    <property name="maxActive" value="${jdbc.maxActive}"/>

    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${jdbc.maxWait}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

    <property name="validationQuery" value="SELECT 'x'"/>
    <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
    <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
    <property name="testOnReturn" value="${jdbc.testOnReturn}"/>

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="false"/>
    <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->
    <!-- 配置监控统计拦截的filters -->
    <!--<property name="filters" value="stat" />-->
  </bean>

  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations">
      <list>
        <value>classpath:META-INF/sqlmap/*Mapper.xml</value>
      </list>
    </property>
    <property name="configLocation" value="classpath:mybatis-config.xml"></property>
  </bean>

  <!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
  <!--<constructor-arg index="0" ref="sqlSessionFactory" />-->
  <!--</bean>-->

  <!-- 扫描mybatisgen下自动生成的dao-->
  <bean id="mapperScannerConfigurerGen" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.gether.bigdata.dao.mapper"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <aop:config>
    <!-- 需事务控制切入点 -->
    <aop:pointcut id="comm-txPointcut"
      expression="execution(* com.gether.bigdata.service.*.*(..))"/>
    <aop:advisor advice-ref="comm-txAdvice" pointcut-ref="comm-txPointcut"/>
  </aop:config>
  <tx:advice id="comm-txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="do*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
    </tx:attributes>
  </tx:advice>
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>